/**
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.irisnet.java.client;

import de.irisnet.java.client.ApiInvoker;
import de.irisnet.java.client.ApiException;
import de.irisnet.java.client.Pair;

import de.irisnet.java.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import de.irisnet.java.client.model.ApiNotice;
import de.irisnet.java.client.model.LicenseInfo;
import de.irisnet.java.client.model.Pricing;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BalanceEndpointsApi {
  String basePath = "https://api.irisnet.de";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get the cost of the configuration for a single image.
  * The cost is subtracted from the license key after a successful check-image operation.
   * @param configId The configuration id from the Basic Configuration operations.
   * @return Pricing
  */
  public Pricing getCost (UUID configId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling getCost",
        new ApiException(400, "Missing the required parameter 'configId' when calling getCost"));
    }

    // create path and map variables
    String path = "/v2/cost/{configId}".replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Pricing) ApiInvoker.deserialize(localVarResponse, "", Pricing.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the cost of the configuration for a single image.
   * The cost is subtracted from the license key after a successful check-image operation.
   * @param configId The configuration id from the Basic Configuration operations.
  */
  public void getCost (UUID configId, final Response.Listener<Pricing> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling getCost",
        new ApiException(400, "Missing the required parameter 'configId' when calling getCost"));
    }

    // create path and map variables
    String path = "/v2/cost/{configId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Pricing) ApiInvoker.deserialize(localVarResponse,  "", Pricing.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get information for the given license key.
  * Get the LicenseInfo schema for the given license key in the authorization header.
   * @return LicenseInfo
  */
  public LicenseInfo getLicenseInfo () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v2/info/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LicenseInfo) ApiInvoker.deserialize(localVarResponse, "", LicenseInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get information for the given license key.
   * Get the LicenseInfo schema for the given license key in the authorization header.

  */
  public void getLicenseInfo (final Response.Listener<LicenseInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v2/info/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LicenseInfo) ApiInvoker.deserialize(localVarResponse,  "", LicenseInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the cost of the configuration for moving images.
  * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
   * @param configId The configuration id from the Basic Configuration operations.
   * @param frames The number of frames that the AI should check.
   * @return Pricing
  */
  public Pricing getVideoCost (UUID configId, Long frames) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling getVideoCost",
        new ApiException(400, "Missing the required parameter 'configId' when calling getVideoCost"));
    }
    // verify the required parameter 'frames' is set
    if (frames == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'frames' when calling getVideoCost",
        new ApiException(400, "Missing the required parameter 'frames' when calling getVideoCost"));
    }

    // create path and map variables
    String path = "/v2/cost/{configId}/{frames}".replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString())).replaceAll("\\{" + "frames" + "\\}", apiInvoker.escapeString(frames.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Pricing) ApiInvoker.deserialize(localVarResponse, "", Pricing.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the cost of the configuration for moving images.
   * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
   * @param configId The configuration id from the Basic Configuration operations.   * @param frames The number of frames that the AI should check.
  */
  public void getVideoCost (UUID configId, Long frames, final Response.Listener<Pricing> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling getVideoCost",
        new ApiException(400, "Missing the required parameter 'configId' when calling getVideoCost"));
    }
    // verify the required parameter 'frames' is set
    if (frames == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'frames' when calling getVideoCost",
        new ApiException(400, "Missing the required parameter 'frames' when calling getVideoCost"));
    }

    // create path and map variables
    String path = "/v2/cost/{configId}/{frames}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString())).replaceAll("\\{" + "frames" + "\\}", apiInvoker.escapeString(frames.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Pricing) ApiInvoker.deserialize(localVarResponse,  "", Pricing.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the cost of the configuration for moving images.
  * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
   * @param configId The configuration id from the Basic Configuration operations.
   * @param fps The frames per second of the video or stream.
   * @param duration The duration in seconds of the video or stream.
   * @return Pricing
  */
  public Pricing getVideoCost1 (UUID configId, Integer fps, Long duration) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling getVideoCost1",
        new ApiException(400, "Missing the required parameter 'configId' when calling getVideoCost1"));
    }
    // verify the required parameter 'fps' is set
    if (fps == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fps' when calling getVideoCost1",
        new ApiException(400, "Missing the required parameter 'fps' when calling getVideoCost1"));
    }
    // verify the required parameter 'duration' is set
    if (duration == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'duration' when calling getVideoCost1",
        new ApiException(400, "Missing the required parameter 'duration' when calling getVideoCost1"));
    }

    // create path and map variables
    String path = "/v2/cost/{configId}/{fps}/{duration}".replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString())).replaceAll("\\{" + "fps" + "\\}", apiInvoker.escapeString(fps.toString())).replaceAll("\\{" + "duration" + "\\}", apiInvoker.escapeString(duration.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Pricing) ApiInvoker.deserialize(localVarResponse, "", Pricing.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the cost of the configuration for moving images.
   * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
   * @param configId The configuration id from the Basic Configuration operations.   * @param fps The frames per second of the video or stream.   * @param duration The duration in seconds of the video or stream.
  */
  public void getVideoCost1 (UUID configId, Integer fps, Long duration, final Response.Listener<Pricing> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling getVideoCost1",
        new ApiException(400, "Missing the required parameter 'configId' when calling getVideoCost1"));
    }
    // verify the required parameter 'fps' is set
    if (fps == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fps' when calling getVideoCost1",
        new ApiException(400, "Missing the required parameter 'fps' when calling getVideoCost1"));
    }
    // verify the required parameter 'duration' is set
    if (duration == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'duration' when calling getVideoCost1",
        new ApiException(400, "Missing the required parameter 'duration' when calling getVideoCost1"));
    }

    // create path and map variables
    String path = "/v2/cost/{configId}/{fps}/{duration}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString())).replaceAll("\\{" + "fps" + "\\}", apiInvoker.escapeString(fps.toString())).replaceAll("\\{" + "duration" + "\\}", apiInvoker.escapeString(duration.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Pricing) ApiInvoker.deserialize(localVarResponse,  "", Pricing.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
