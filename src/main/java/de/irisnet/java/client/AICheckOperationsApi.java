/**
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.irisnet.java.client;

import de.irisnet.java.client.ApiInvoker;
import de.irisnet.java.client.ApiException;
import de.irisnet.java.client.Pair;

import de.irisnet.java.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import de.irisnet.java.client.model.ApiNotice;
import de.irisnet.java.client.model.Callback;
import de.irisnet.java.client.model.CheckResult;
import de.irisnet.java.client.model.Data;
import de.irisnet.java.client.model.DocumentCheckRequestData;
import java.util.*;
import de.irisnet.java.client.model.LiveDocumentCheckRequestData;
import de.irisnet.java.client.model.LiveDocumentCheckResponseData;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AICheckOperationsApi {
  String basePath = "https://api.irisnet.de";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Check an id document with the AI.
  * The response (_CheckResult_ schema) containing only the checkId and possibly ApiNotices is returned immediately after the request. The actual body (_CheckResult_ schema) is sent to the _callbackUrl_ after the AI has finished processing.
   * @param configId The configuration id from the Basic Configuration operations.
   * @param documentCheckRequestData The DocumentCheckRequestData containing data needed for the id document check.
   * @return CheckResult
  */
  public CheckResult checkIdDocument (UUID configId, DocumentCheckRequestData documentCheckRequestData) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = documentCheckRequestData;
    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling checkIdDocument",
        new ApiException(400, "Missing the required parameter 'configId' when calling checkIdDocument"));
    }
    // verify the required parameter 'documentCheckRequestData' is set
    if (documentCheckRequestData == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentCheckRequestData' when calling checkIdDocument",
        new ApiException(400, "Missing the required parameter 'documentCheckRequestData' when calling checkIdDocument"));
    }

    // create path and map variables
    String path = "/v2/check-id-document/{configId}".replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CheckResult) ApiInvoker.deserialize(localVarResponse, "", CheckResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Check an id document with the AI.
   * The response (_CheckResult_ schema) containing only the checkId and possibly ApiNotices is returned immediately after the request. The actual body (_CheckResult_ schema) is sent to the _callbackUrl_ after the AI has finished processing.
   * @param configId The configuration id from the Basic Configuration operations.   * @param documentCheckRequestData The DocumentCheckRequestData containing data needed for the id document check.
  */
  public void checkIdDocument (UUID configId, DocumentCheckRequestData documentCheckRequestData, final Response.Listener<CheckResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = documentCheckRequestData;

    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling checkIdDocument",
        new ApiException(400, "Missing the required parameter 'configId' when calling checkIdDocument"));
    }
    // verify the required parameter 'documentCheckRequestData' is set
    if (documentCheckRequestData == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentCheckRequestData' when calling checkIdDocument",
        new ApiException(400, "Missing the required parameter 'documentCheckRequestData' when calling checkIdDocument"));
    }

    // create path and map variables
    String path = "/v2/check-id-document/{configId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CheckResult) ApiInvoker.deserialize(localVarResponse,  "", CheckResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Check an image with the AI.
  * The response (_CheckResult_ schema) is returned immediately after the request.
   * @param configId The configuration id from the Basic Configuration operations.
   * @param url &lt;s&gt;The url to the image that needs to be checked.&lt;/s&gt; Deprecated: Use request body instead. &lt;b&gt;This parameter will be removed in future releases.&lt;/b&gt;
   * @param detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows detections (e.g. _BaseDetection_ schema) that contains extended features to each found object.
   * @param imageEncode Specifies whether or not to draw an output image that will be delivered in the response body as base64 encoded string. The _Encoded_ schema will be available in the response.
   * @param data The http(s) url or base64 encoded body uri of the image that needs to be checked.
   * @return CheckResult
  */
  public CheckResult checkImage (UUID configId, String url, Integer detail, Boolean imageEncode, Data data) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = data;
    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling checkImage",
        new ApiException(400, "Missing the required parameter 'configId' when calling checkImage"));
    }

    // create path and map variables
    String path = "/v2/check-image/{configId}".replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "detail", detail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "imageEncode", imageEncode));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CheckResult) ApiInvoker.deserialize(localVarResponse, "", CheckResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Check an image with the AI.
   * The response (_CheckResult_ schema) is returned immediately after the request.
   * @param configId The configuration id from the Basic Configuration operations.   * @param url &lt;s&gt;The url to the image that needs to be checked.&lt;/s&gt; Deprecated: Use request body instead. &lt;b&gt;This parameter will be removed in future releases.&lt;/b&gt;   * @param detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows detections (e.g. _BaseDetection_ schema) that contains extended features to each found object.   * @param imageEncode Specifies whether or not to draw an output image that will be delivered in the response body as base64 encoded string. The _Encoded_ schema will be available in the response.   * @param data The http(s) url or base64 encoded body uri of the image that needs to be checked.
  */
  public void checkImage (UUID configId, String url, Integer detail, Boolean imageEncode, Data data, final Response.Listener<CheckResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = data;

    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling checkImage",
        new ApiException(400, "Missing the required parameter 'configId' when calling checkImage"));
    }

    // create path and map variables
    String path = "/v2/check-image/{configId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "detail", detail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "imageEncode", imageEncode));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CheckResult) ApiInvoker.deserialize(localVarResponse,  "", CheckResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Check a stream with the AI.
  * The body is continuously send per JSON stream until completion of the video stream. Only then the full _CheckResult_ schema will be shown (past _Events_ omitted).  &lt;b&gt;NOTICE: Depending on your configuration and parameters this operation can be quite expensive on your credit balance.&lt;b&gt;  &lt;b&gt;WARNING: Please do not use the &#39;Try it out&#39; for this operation. The browser is not able to refresh the response preview until the completion of the video stream.&lt;b&gt;
   * @param configId The configuration id from the Basic Configuration operations.
   * @param inUrl The URL of the video stream that the AI should check.
   * @param outUrl The URL of where the AI should send the encoded stream.
   * @param cycleLength Determine how often (value in milliseconds) the the AI should give a feedback.
   * @param checkRate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;.
   * @return List<CheckResult>
  */
  public List<CheckResult> checkStream (UUID configId, String inUrl, String outUrl, Integer cycleLength, Integer checkRate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling checkStream",
        new ApiException(400, "Missing the required parameter 'configId' when calling checkStream"));
    }
    // verify the required parameter 'inUrl' is set
    if (inUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inUrl' when calling checkStream",
        new ApiException(400, "Missing the required parameter 'inUrl' when calling checkStream"));
    }

    // create path and map variables
    String path = "/v2/check-stream/{configId}".replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "inUrl", inUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "outUrl", outUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cycleLength", cycleLength));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkRate", checkRate));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<CheckResult>) ApiInvoker.deserialize(localVarResponse, "array", CheckResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Check a stream with the AI.
   * The body is continuously send per JSON stream until completion of the video stream. Only then the full _CheckResult_ schema will be shown (past _Events_ omitted).  &lt;b&gt;NOTICE: Depending on your configuration and parameters this operation can be quite expensive on your credit balance.&lt;b&gt;  &lt;b&gt;WARNING: Please do not use the &#39;Try it out&#39; for this operation. The browser is not able to refresh the response preview until the completion of the video stream.&lt;b&gt;
   * @param configId The configuration id from the Basic Configuration operations.   * @param inUrl The URL of the video stream that the AI should check.   * @param outUrl The URL of where the AI should send the encoded stream.   * @param cycleLength Determine how often (value in milliseconds) the the AI should give a feedback.   * @param checkRate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;.
  */
  public void checkStream (UUID configId, String inUrl, String outUrl, Integer cycleLength, Integer checkRate, final Response.Listener<List<CheckResult>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling checkStream",
        new ApiException(400, "Missing the required parameter 'configId' when calling checkStream"));
    }
    // verify the required parameter 'inUrl' is set
    if (inUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inUrl' when calling checkStream",
        new ApiException(400, "Missing the required parameter 'inUrl' when calling checkStream"));
    }

    // create path and map variables
    String path = "/v2/check-stream/{configId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "inUrl", inUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "outUrl", outUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cycleLength", cycleLength));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkRate", checkRate));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<CheckResult>) ApiInvoker.deserialize(localVarResponse,  "array", CheckResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Check a video with the AI.
  * An empty response is returned immediately. The actual body (_CheckResult_ schema) is send to the _callbackUrl_ after the AI has finished processing.  &lt;b&gt;NOTICE: Depending on your configuration and parameters this operation can be quite expensive on your credit balance.&lt;b&gt;
   * @param configId The configuration id from the Basic Configuration operations.
   * @param url The url to the video that needs to be checked.
   * @param callback 
   * @param detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows events (_Event_ schema) that contains extended features to each found object.
   * @param imageEncode Specifies whether or not to draw an output video that can be downloaded afterwards. The output video format will be MP4 containing H.264 encoding independent of the input format. The _Encoded_ schema will be available in the response.
   * @param checkRate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;.
   * @return void
  */
  public void checkVideo (UUID configId, String url, Callback callback, Integer detail, Boolean imageEncode, Integer checkRate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = callback;
    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling checkVideo",
        new ApiException(400, "Missing the required parameter 'configId' when calling checkVideo"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling checkVideo",
        new ApiException(400, "Missing the required parameter 'url' when calling checkVideo"));
    }
    // verify the required parameter 'callback' is set
    if (callback == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callback' when calling checkVideo",
        new ApiException(400, "Missing the required parameter 'callback' when calling checkVideo"));
    }

    // create path and map variables
    String path = "/v2/check-video/{configId}".replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "detail", detail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "imageEncode", imageEncode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkRate", checkRate));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Check a video with the AI.
   * An empty response is returned immediately. The actual body (_CheckResult_ schema) is send to the _callbackUrl_ after the AI has finished processing.  &lt;b&gt;NOTICE: Depending on your configuration and parameters this operation can be quite expensive on your credit balance.&lt;b&gt;
   * @param configId The configuration id from the Basic Configuration operations.   * @param url The url to the video that needs to be checked.   * @param callback    * @param detail Set the detail level of the response.  * _1_ - The response only contains the _Summary_ and possibly the _Encoded_ schemas for basic information&#39;s (better API performance). * _2_ - Additionally lists all broken rules (_BrokenRule_ schema) according to the configuration parameters that were requested. * _3_ - Also shows events (_Event_ schema) that contains extended features to each found object.   * @param imageEncode Specifies whether or not to draw an output video that can be downloaded afterwards. The output video format will be MP4 containing H.264 encoding independent of the input format. The _Encoded_ schema will be available in the response.   * @param checkRate The milliseconds between each AI check. E.g. The AI will check 1 frame per second when checkRate is set to &#39;1000&#39;.
  */
  public void checkVideo (UUID configId, String url, Callback callback, Integer detail, Boolean imageEncode, Integer checkRate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = callback;

    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling checkVideo",
        new ApiException(400, "Missing the required parameter 'configId' when calling checkVideo"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling checkVideo",
        new ApiException(400, "Missing the required parameter 'url' when calling checkVideo"));
    }
    // verify the required parameter 'callback' is set
    if (callback == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callback' when calling checkVideo",
        new ApiException(400, "Missing the required parameter 'callback' when calling checkVideo"));
    }

    // create path and map variables
    String path = "/v2/check-video/{configId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "detail", detail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "imageEncode", imageEncode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkRate", checkRate));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Start a guided live id document check with the AI.
  * The synchronous response (_LiveDocumentCheckResponseData_ schema) contains an eventId, possibly a token and an URL to send the enduser to. The actual result (_CheckResult_ schema) of the document check is sent to the provided _callbackUrl_ after the AI has finished processing.
   * @param configId The configuration id from the Basic Configuration operations.
   * @param liveDocumentCheckRequestData The LiveDocumentCheckRequestData containing data needed for the live id document check.
   * @return LiveDocumentCheckResponseData
  */
  public LiveDocumentCheckResponseData liveDocumentCheck (UUID configId, LiveDocumentCheckRequestData liveDocumentCheckRequestData) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = liveDocumentCheckRequestData;
    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling liveDocumentCheck",
        new ApiException(400, "Missing the required parameter 'configId' when calling liveDocumentCheck"));
    }
    // verify the required parameter 'liveDocumentCheckRequestData' is set
    if (liveDocumentCheckRequestData == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'liveDocumentCheckRequestData' when calling liveDocumentCheck",
        new ApiException(400, "Missing the required parameter 'liveDocumentCheckRequestData' when calling liveDocumentCheck"));
    }

    // create path and map variables
    String path = "/v2/check-live-id-document/{configId}".replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LiveDocumentCheckResponseData) ApiInvoker.deserialize(localVarResponse, "", LiveDocumentCheckResponseData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Start a guided live id document check with the AI.
   * The synchronous response (_LiveDocumentCheckResponseData_ schema) contains an eventId, possibly a token and an URL to send the enduser to. The actual result (_CheckResult_ schema) of the document check is sent to the provided _callbackUrl_ after the AI has finished processing.
   * @param configId The configuration id from the Basic Configuration operations.   * @param liveDocumentCheckRequestData The LiveDocumentCheckRequestData containing data needed for the live id document check.
  */
  public void liveDocumentCheck (UUID configId, LiveDocumentCheckRequestData liveDocumentCheckRequestData, final Response.Listener<LiveDocumentCheckResponseData> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = liveDocumentCheckRequestData;

    // verify the required parameter 'configId' is set
    if (configId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'configId' when calling liveDocumentCheck",
        new ApiException(400, "Missing the required parameter 'configId' when calling liveDocumentCheck"));
    }
    // verify the required parameter 'liveDocumentCheckRequestData' is set
    if (liveDocumentCheckRequestData == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'liveDocumentCheckRequestData' when calling liveDocumentCheck",
        new ApiException(400, "Missing the required parameter 'liveDocumentCheckRequestData' when calling liveDocumentCheck"));
    }

    // create path and map variables
    String path = "/v2/check-live-id-document/{configId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "configId" + "\\}", apiInvoker.escapeString(configId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "LICENSE-KEY" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LiveDocumentCheckResponseData) ApiInvoker.deserialize(localVarResponse,  "", LiveDocumentCheckResponseData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
